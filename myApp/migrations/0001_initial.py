# Generated by Django 2.2.11 on 2020-04-15 18:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GID_0', models.CharField(max_length=200)),
                ('NAME_0', models.CharField(max_length=200)),
                ('GID_1', models.CharField(max_length=200)),
                ('NAME_1', models.CharField(max_length=200)),
                ('GID_2', models.CharField(max_length=200)),
                ('NAME_2', models.CharField(max_length=200)),
                ('GID_3', models.CharField(max_length=200)),
                ('NAME_3', models.CharField(max_length=200)),
                ('AEZ_id', models.CharField(default='none', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Crop_Feasibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feas_DRI_e', models.IntegerField(choices=[(0, 'no for all'), (1, 'no for most target grp'), (2, 'yes for most target grp'), (3, 'yes for all')], default=0, verbose_name='feas_DRI')),
                ('feas_DRI_p', models.IntegerField(choices=[(0, 'no for all'), (1, 'no for most target grp'), (2, 'yes for most target grp'), (3, 'yes for all')], default=0, verbose_name='feas_DRI_p')),
                ('feas_DRI_a', models.IntegerField(choices=[(0, 'no for all'), (1, 'no for most target grp'), (2, 'yes for most target grp'), (3, 'yes for all')], default=0, verbose_name='feas_DRI_a')),
                ('feas_DRI_f', models.IntegerField(choices=[(0, 'no for all'), (1, 'no for most target grp'), (2, 'yes for most target grp'), (3, 'yes for all')], default=0, verbose_name='feas_DRI_f')),
                ('feas_soc_acceptable', models.IntegerField(choices=[(3, 'no for all'), (2, 'no for most target grp'), (1, 'yes for most target grp'), (0, 'yes for all')], default=0, verbose_name='feas_social_wo')),
                ('feas_soc_acceptable_wo', models.IntegerField(choices=[(3, 'no for all'), (2, 'no for most target grp'), (1, 'yes for most target grp'), (0, 'yes for all')], default=0, verbose_name='feas_social_wo')),
                ('feas_soc_acceptable_c5', models.IntegerField(choices=[(3, 'no for all'), (2, 'no for most target grp'), (1, 'yes for most target grp'), (0, 'yes for all')], default=0, verbose_name='feas_social_c5')),
                ('feas_prod_skill', models.IntegerField(choices=[(0, 'no'), (1, 'maybe no'), (2, 'maybe yes'), (3, 'yes')], default=0, verbose_name='feas_prod_skill')),
                ('feas_workload', models.IntegerField(choices=[(3, 'no'), (2, 'maybe no'), (1, 'maybe yes'), (0, 'yes')], default=0, verbose_name='feas_workload')),
                ('feas_tech_service', models.IntegerField(choices=[(1, 'no'), (2, 'maybe no'), (3, 'maybe yes'), (4, 'yes / there is no need for it since beneficiaries already have enough skill')], default=0, verbose_name='feas_tech_service')),
                ('feas_invest_fixed', models.IntegerField(choices=[(3, 'no'), (2, 'maybe no'), (1, 'maybe yes'), (0, 'yes')], default=0, verbose_name='feas_invest_fixed')),
                ('feas_invest_variable', models.IntegerField(choices=[(3, 'no'), (2, 'maybe no'), (1, 'maybe yes'), (0, 'yes')], default=0, verbose_name='feas_invest_variable')),
                ('feas_availability_non', models.IntegerField(choices=[(0, '10-12 mon'), (1, '7-9 mon'), (2, '4-6 mon'), (3, '0-3 mon')], default=0, verbose_name='feas_availability_non')),
                ('feas_availability_prod', models.IntegerField(choices=[(0, '0-3 mon'), (1, '4-6 mon'), (2, '7-9 mon'), (3, '10-12 mon')], default=0, verbose_name='feas_availability_prod')),
                ('feas_affordability', models.IntegerField(choices=[(0, 'no'), (1, 'maybe no'), (2, 'maybe yes'), (3, 'yes')], default=0, verbose_name='feas_affordability')),
                ('feas_storability', models.IntegerField(choices=[(0, 'no'), (1, 'maybe no'), (2, 'maybe yes'), (3, 'yes')], default=0, verbose_name='feas_storability')),
                ('crop_score', models.IntegerField(default=0, verbose_name='crop_score')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record_date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DRI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nut_group', models.CharField(default='children 6 to 59 month', max_length=200, verbose_name='group')),
                ('energy', models.FloatField(default=0, verbose_name='nut_energy')),
                ('protein', models.FloatField(default=0, verbose_name='nut_protein')),
                ('vita', models.FloatField(default=0, verbose_name='Vit-A')),
                ('fe', models.FloatField(default=0, verbose_name='iron')),
            ],
        ),
        migrations.CreateModel(
            name='FCT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('FCT_id', models.IntegerField(default=1, unique=True)),
                ('food_grp_id', models.IntegerField(default=1)),
                ('food_item_id', models.IntegerField(default=1, unique=True)),
                ('Food_grp', models.CharField(max_length=200)),
                ('Food_name', models.CharField(max_length=200)),
                ('Crop_ref', models.CharField(max_length=200)),
                ('Edible', models.FloatField(default=0)),
                ('Energy', models.FloatField(default=0)),
                ('WATER', models.FloatField(default=0)),
                ('Protein', models.FloatField(default=0)),
                ('Fat', models.FloatField(default=0)),
                ('Carbohydrate', models.FloatField(default=0)),
                ('Fiber', models.FloatField(default=0)),
                ('ASH', models.FloatField(default=0)),
                ('CA', models.FloatField(default=0)),
                ('FE', models.FloatField(default=0)),
                ('MG', models.FloatField(default=0)),
                ('P', models.FloatField(default=0)),
                ('K', models.FloatField(default=0)),
                ('NA', models.FloatField(default=0)),
                ('ZN', models.FloatField(default=0)),
                ('CU', models.FloatField(default=0)),
                ('VITA_RAE', models.FloatField(default=0)),
                ('RETOL', models.FloatField(default=0)),
                ('B_Cart_eq', models.FloatField(default=0)),
                ('VITD', models.FloatField(default=0)),
                ('VITE', models.FloatField(default=0)),
                ('THIA', models.FloatField(default=0)),
                ('RIBF', models.FloatField(default=0)),
                ('NIA', models.FloatField(default=0)),
                ('VITB6C', models.FloatField(default=0)),
                ('FOL', models.FloatField(default=0)),
                ('VITB12', models.FloatField(default=0)),
                ('VITC', models.FloatField(default=0)),
                ('portion_size_init', models.IntegerField(default=30)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='name')),
                ('country', models.CharField(blank=True, max_length=200)),
                ('region', models.CharField(blank=True, max_length=200)),
                ('province', models.CharField(blank=True, max_length=200)),
                ('community', models.CharField(blank=True, max_length=200)),
                ('AEZ_id', models.CharField(blank=True, max_length=200)),
                ('stunting_rate', models.IntegerField(blank=True, default=0)),
                ('wasting_rate', models.IntegerField(blank=True, default=0)),
                ('anemia_rate', models.IntegerField(blank=True, default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record_date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('myCountry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myApp.Countries')),
            ],
        ),
        migrations.CreateModel(
            name='myStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('curr_User', models.IntegerField(blank=True, default=0)),
                ('myLocation', models.IntegerField(blank=True, default=0)),
                ('myCrop', models.IntegerField(blank=True, default=0)),
                ('myTarget', models.IntegerField(blank=True, default=0)),
                ('myDiet', models.IntegerField(blank=True, default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Pop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('NAME_0', models.CharField(max_length=200)),
                ('GID_0', models.CharField(max_length=200)),
                ('Year', models.IntegerField(default=0, verbose_name='Year')),
                ('Age_class', models.CharField(max_length=50)),
                ('Age_class_id', models.IntegerField(default=0, verbose_name='Age_Class')),
                ('share_Pop', models.FloatField(default=0)),
                ('share_Preg', models.FloatField(default=0)),
                ('share_BF', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nut_group', models.CharField(choices=[('children under 5', 'children 6 to 59 month'), ('pregnant women', 'pregnant women'), ('adlescent girl', 'adlescent girl'), ('adult', 'adult'), ('child 0-23 month', 'child 0-23 month'), ('child 24-59 month', 'child 24-59 month'), ('adolescent girl', 'adolescent girl'), ('pregnant women', 'pregnant women'), ('adult', 'adult')], default='children 6 to 59 month', max_length=200, verbose_name='nut_group')),
                ('target_scope', models.IntegerField(default=0, verbose_name='class_aggr')),
                ('target_pop', models.IntegerField(default=1, verbose_name='target population')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record_date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('myDRI', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myApp.DRI')),
                ('myLocation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myApp.Location')),
            ],
        ),
        migrations.CreateModel(
            name='Crop_SubNational',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_status', models.IntegerField(default=0, verbose_name='selected_status')),
                ('m1_avail', models.IntegerField(default=0, verbose_name='mon01_avail')),
                ('m2_avail', models.IntegerField(default=0, verbose_name='mon02_avail')),
                ('m3_avail', models.IntegerField(default=0, verbose_name='mon03_avail')),
                ('m4_avail', models.IntegerField(default=0, verbose_name='mon04_avail')),
                ('m5_avail', models.IntegerField(default=0, verbose_name='mon05_avail')),
                ('m6_avail', models.IntegerField(default=0, verbose_name='mon06_avail')),
                ('m7_avail', models.IntegerField(default=0, verbose_name='mon07_avail')),
                ('m8_avail', models.IntegerField(default=0, verbose_name='mon08_avail')),
                ('m9_avail', models.IntegerField(default=0, verbose_name='mon09_avail')),
                ('m10_avail', models.IntegerField(default=0, verbose_name='mon10_avail')),
                ('m11_avail', models.IntegerField(default=0, verbose_name='mon11_avail')),
                ('m12_avail', models.IntegerField(default=0, verbose_name='mon12_avail')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record_date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('crop_feas', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myApp.Crop_Feasibility')),
                ('myFCT', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myApp.FCT', to_field='food_item_id')),
                ('myLocation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myApp.Location')),
            ],
        ),
        migrations.CreateModel(
            name='Crop_National',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AEZ_id', models.CharField(max_length=200)),
                ('myFCT', models.ForeignKey(default=436, on_delete=django.db.models.deletion.CASCADE, to='myApp.FCT', to_field='food_item_id')),
            ],
        ),
        migrations.CreateModel(
            name='Crop_Individual',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_scope', models.IntegerField(default=0, verbose_name='target_scope')),
                ('id_table', models.IntegerField(default=0)),
                ('portion_size', models.IntegerField(default=10)),
                ('total_weight', models.IntegerField(default=0)),
                ('count_prod', models.IntegerField(default=0, verbose_name='count_prod')),
                ('count_buy', models.IntegerField(default=0, verbose_name='count_buy')),
                ('month', models.IntegerField(default=0, verbose_name='month')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record_date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('myFCT', models.ForeignKey(default=436, on_delete=django.db.models.deletion.CASCADE, to='myApp.FCT', to_field='food_item_id')),
                ('myLocation', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='myApp.Location')),
            ],
        ),
        migrations.CreateModel(
            name='Country_label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adm_name_1', models.CharField(blank=True, max_length=200)),
                ('adm_name_2', models.CharField(blank=True, max_length=200)),
                ('adm_name_3', models.CharField(blank=True, max_length=200)),
                ('adm_name_4', models.CharField(blank=True, max_length=200)),
                ('adm_name_5', models.CharField(blank=True, max_length=200)),
                ('myCountry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='myApp.Countries')),
            ],
        ),
    ]
